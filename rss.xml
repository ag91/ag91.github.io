<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Where parallels cross</title>
    <link>http://ag91.github.io</link>
    <description>Interesting bits of life</description>
    <pubDate>Thu, 08 Jun 2023 22:46:04 BST</pubDate>
    <lastBuildDate>Thu, 08 Jun 2023 22:46:04 BST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>A little exploration of Go from a Clojure perspective</title>
      <link>http://ag91.github.io/blog/2023/06/08/a-little-exploration-of-go-from-a-clojure-perspective</link>
      <description><![CDATA[<div>
<div class="post">
<h1>A little exploration of Go from a Clojure perspective</h1>
<p>
I have been looking into Go recently and I decided to find out how to
do things that I usually do in Clojure. These are (a cleaned up
version of) my notes.
</p>

<p>
First let's start from iterations. Clojure (as any good Lisp language)
focuses on sequences. So changing a sequence into a new one is key (and super easy):
</p>

<div class="org-src-container">
<pre class="src src-clojure">(map inc [1 2 3])
</pre>
</div>

<p>
(2 3 4)
</p>

<p>
While Clojure focuses on immutability to keep things simple, Go focuses on performance.
The easiest way to achieve the same is with a <code>for</code> loop:
</p>

<div class="org-src-container">
<pre class="src src-gore">list := []int{1,2,3}
for i, value := range list {
        list[i] = value + 1
}
list
</pre>
</div>

<pre class="example" id="orgee331e6">
[]int{
  1,
  2,
  3,

..... 
 []int{
  2,
  3,
  4,
</pre>

<p>
Next Clojure focuses on data transformation and the most used data
structure is the map. So let's iterate over a map's values:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(into {} (for [[k v] {:a 1 :b 2}] [k (inc v)])) 
; (update-vals {:a 1 :b 2} inc) ; clojure 1.11
</pre>
</div>

<p>
{:a 2, :b 3}
</p>

<p>
In the above we use a Clojure <code>for</code> loop to create a new vector of
key-value pairs, where they value in the pair was increased by one.
</p>

<p>
Go also comes with a map data structure which is super easy to write.
Again the <code>for</code> loop will let us modify things:
</p>

<div class="org-src-container">
<pre class="src src-gore">theMap := map[string]int{"a": 1, "b": 2}
for key, value := range theMap {
        theMap[key] = value + 1
}
theMap
</pre>
</div>

<pre class="example">
map[string]int{
  "a": 1,
  "b": 2,

..... 
 map[string]int{
  "a": 2,
  "b": 3,
</pre>



<p>
And to complete our little exploration, I would say polymorphism is a
must. In Clojure we can make interfaces via protocols:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(defprotocol StringMyself
  (who-am-i [x]))

(deftype Duck []
  StringMyself
  (who-am-i [x] "I am a duck!"))

(deftype Octopus []
  StringMyself
  (who-am-i [x] "I am an octopus!"))

(who-am-i (Octopus.))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">StringMyself</td>
</tr>

<tr>
<td class="org-left">user.Duck</td>
</tr>

<tr>
<td class="org-left">user.Octopus</td>
</tr>

<tr>
<td class="org-left">"I am an octopus!"</td>
</tr>
</tbody>
</table>

<p>
In Go is beautifully simple as well:
</p>

<div class="org-src-container">
<pre class="src src-gore">type StringMyself interface {
        WhoAmI() string
}

type Duck struct {}
func (d Duck) WhoAmI () string {
        return "I am a duck!"
}
type Octopus struct {}
func (d Octopus) WhoAmI () string {
        return "I am an octopus!"
}

var o StringMyself = Octopus{}
o.WhoAmI()
</pre>
</div>

<pre class="example">
..... 
  main.Octopus{
 \"I am an octopus!\""
</pre>


<p>
Not bad as a first go at go. And it seems to be pretty succinct!
</p>

<p>
Happy Going!
</p>

</div>
</div>]]></description>
      <pubDate>2023-06-08</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/08/a-little-exploration-of-go-from-a-clojure-perspective</guid>
    </item>
    <item>
      <title>ob-gore: literate Go run via the Gore REPL</title>
      <link>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</guid>
    </item>
    <item>
      <title>FS2 vs ZIO streams with Ammonite: a syntax comparison</title>
      <link>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-03</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</guid>
    </item>
    <item>
      <title>org-blk-uri a little module to insert a file or url as an Org Mode src block</title>
      <link>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-05-25</pubDate>
      <guid>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</guid>
    </item>
    <item>
      <title>Moldable Emacs: what is the public API of this Elisp buffer?</title>
      <link>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-24</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</guid>
    </item>
    <item>
      <title>Doctest.el or testing your pure Elisp functions in your docstring</title>
      <link>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-20</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</guid>
    </item>
    <item>
      <title>Org Agenda and Your Future, or how to keep score of your long term goals with Org Mode</title>
      <link>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-12</pubDate>
      <guid>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</guid>
    </item>
    <item>
      <title>A little read-string utility using an Org Mode buffer</title>
      <link>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-09</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</guid>
    </item>
    <item>
      <title>Emacs as your code-compass: what code is this contributor familiar with?</title>
      <link>http://ag91.github.io/blog/2023/02/06/emacs-as-your-code-compass-what-code-is-this-contributor-familiar-with</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/06/emacs-as-your-code-compass-what-code-is-this-contributor-familiar-with</guid>
    </item>
    <item>
      <title>Moldable Emacs: remove unused React Native styles for a component with tree-sitter</title>
      <link>http://ag91.github.io/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-12-13</pubDate>
      <guid>http://ag91.github.io/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter</guid>
    </item>
  </channel>
</rss>