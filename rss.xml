<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Where parallels cross</title>
    <link>http://ag91.github.io</link>
    <description>Interesting bits of life</description>
    <pubDate>Tue, 13 Dec 2022 22:12:28 GMT</pubDate>
    <lastBuildDate>Tue, 13 Dec 2022 22:12:28 GMT</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Moldable Emacs: remove unused React Native styles for a component with tree-sitter</title>
      <link>http://ag91.github.io/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Moldable Emacs: remove unused React Native styles for a component with tree-sitter</h1>
<p>
These days I am working on mobile development with React Native. So I
was cleaning up my change for opening a Pull Request and I had to
refactor a style.js file for a component. This file contains all the
style rules for the look and feel of the related React component.
</p>

<p>
I noticed that some of the style rules where not used in the related
component. The situation looked somewhat like this:
</p>

<div class="org-src-container">
<pre class="src src-js">import {StyleSheet} from 'react-native';

const style = StyleSheet.create({
  used: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  notUsed1: {
    flex: 1,
    backgroundColor: colors.grayExtraLight,
  },
  notUsed2: {
    alignItems: 'center',
    position: 'absolute',
  },
}
</pre>
</div>

<p>
The issue was that there were a lot of rules in there and it would
have been extremely boring to check one at the time. So I thought:
this sounds the right job for my <a href="https://github.com/ag91/moldable-emacs">moldable-emacs</a>!
</p>

<p>
The idea was basically to go through the style rules and remove the
ones I could not find in the file importing them.
</p>

<p>
The playground is pretty simple:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(--&gt; (me-by-type 'pair self)
     (--filter (s-contains-p "{\n" (plist-get it :text)) it)
     (let ((file-using-styles (with-current-buffer "TheComponentUsingTheStyle.js"
                                (buffer-substring-no-properties (point-min) (point-max)))))
       (--remove (s-contains-p (concat "." (car (s-split ":" (plist-get it :text)))) file-using-styles) it))
     (me-transit-node-texts it (lambda (text) ""))
     me-change-nodes)
</pre>
</div>

<p>
I run this from the Playground mold that I open while looking at the
style.js file. You can see how it works in this video:
</p>

<p>
<a href="/assets/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter/transitStyleReact.mp4">/assets/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter/transitStyleReact.mp4</a>
</p>

<p>
As a reminder, opening the Playground mold sets the <code>self</code> local
variable to a list of plist representing the tree-sitter parse tree.
So with <code>me-by-type</code> I am selecting all the tree-sitter elements that
have type <code>pair</code>. And picking the ones that look like a style rule (in
my case a squiggly bracket with a newline did the trick).
</p>

<p>
Now, assuming I had open the component file in a buffer, I just
<code>--remove</code> the style rules that are used (again for simplicity I
checked for ".&lt;styleRuleName&gt;"). That leaves me with the tree-sitter
elements that represent unused style rules.
</p>

<p>
Finally using <code>me-transit-node-texts</code> I remove the definitions of
all those elements.
</p>

<p>
The last thing I have to do is to also remove commas left in the style
file and I am done. I didn't automate that bit because I used this
only a couple of times and I could do that on the fly.
</p>

<p>
As you can see, tree-sitter is not just for code navigation/highlighting ;)
</p>

<p>
Happy editing!
</p>

</div>
</div>]]></description>
      <pubDate>2022-12-13</pubDate>
      <guid>http://ag91.github.io/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter</guid>
    </item>
    <item>
      <title>A tiny Elisp library to gather synonyms with Wordnet (and how to use it so Emacs can help searching my notes)</title>
      <link>http://ag91.github.io/blog/2022/11/29/a-tiny-elisp-library-to-gather-synonyms-with-wordnet</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-11-29</pubDate>
      <guid>http://ag91.github.io/blog/2022/11/29/a-tiny-elisp-library-to-gather-synonyms-with-wordnet</guid>
    </item>
    <item>
      <title>Emacs as your code-compass: who is the person who refactored most in this project?</title>
      <link>http://ag91.github.io/blog/2022/11/23/emacs-as-your-code-compass-who-is-the-person-who-refactored-most-in-this-project</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-11-23</pubDate>
      <guid>http://ag91.github.io/blog/2022/11/23/emacs-as-your-code-compass-who-is-the-person-who-refactored-most-in-this-project</guid>
    </item>
    <item>
      <title>Catch you JS console.log you forgot to remove with Emacs and Magit</title>
      <link>http://ag91.github.io/blog/2022/11/15/catch-you-js-consolelog-you-forgot-to-remove-with-emacs-and-magit</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-11-15</pubDate>
      <guid>http://ag91.github.io/blog/2022/11/15/catch-you-js-consolelog-you-forgot-to-remove-with-emacs-and-magit</guid>
    </item>
    <item>
      <title>Merge plists in Elisp</title>
      <link>http://ag91.github.io/blog/2022/10/30/merge-plists-in-elisp</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-10-30</pubDate>
      <guid>http://ag91.github.io/blog/2022/10/30/merge-plists-in-elisp</guid>
    </item>
    <item>
      <title>Find Org Roam notes via their relations</title>
      <link>http://ag91.github.io/blog/2021/03/12/find-org-roam-notes-via-their-relations</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-10-30</pubDate>
      <guid>http://ag91.github.io/blog/2021/03/12/find-org-roam-notes-via-their-relations</guid>
    </item>
    <item>
      <title>Self reflection: a favour I own myself (with a bit of org-ql to make it easier!)</title>
      <link>http://ag91.github.io/blog/2022/10/09/self-reflection-a-favour-i-own-myself-with-a-bit-of-org-ql-to-make-it-easier</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-10-09</pubDate>
      <guid>http://ag91.github.io/blog/2022/10/09/self-reflection-a-favour-i-own-myself-with-a-bit-of-org-ql-to-make-it-easier</guid>
    </item>
    <item>
      <title>A way to fix Helm handling of symlink (/tmp dir) in Mac OS</title>
      <link>http://ag91.github.io/blog/2022/09/13/a-way-to-fix-helm-handling-of-symlink-tmp-dir-in-mac-os</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-09-15</pubDate>
      <guid>http://ag91.github.io/blog/2022/09/13/a-way-to-fix-helm-handling-of-symlink-tmp-dir-in-mac-os</guid>
    </item>
    <item>
      <title>Hacking Projectile to search in all my projects</title>
      <link>http://ag91.github.io/blog/2022/09/13/hacking-projectile-to-search-in-all-my-projects</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-09-15</pubDate>
      <guid>http://ag91.github.io/blog/2022/09/13/hacking-projectile-to-search-in-all-my-projects</guid>
    </item>
    <item>
      <title>Too many org ids! How to tell no to Org mode for certain files</title>
      <link>http://ag91.github.io/blog/2022/09/06/too-many-org-ids-how-to-tell-no-to-org-mode-for-certain-files</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-09-06</pubDate>
      <guid>http://ag91.github.io/blog/2022/09/06/too-many-org-ids-how-to-tell-no-to-org-mode-for-certain-files</guid>
    </item>
  </channel>
</rss>