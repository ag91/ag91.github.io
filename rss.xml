<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Where parallels cross</title>
    <link>http://ag91.github.io</link>
    <description>Interesting bits of life</description>
    <pubDate>Tue, 29 Aug 2023 23:20:31 BST</pubDate>
    <lastBuildDate>Tue, 29 Aug 2023 23:20:31 BST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>An easier way to try out Clojure libraries with ob-clojure and cider</title>
      <link>http://ag91.github.io/blog/2023/08/03/an-easier-way-to-try-out-clojure-libraries-with-ob-clojure-and-cider</link>
      <description><![CDATA[<div>
<div class="post">
<h1>An easier way to try out Clojure libraries with ob-clojure and cider</h1>
<p>
I keep notes in an <a href="https://www.orgroam.com/">org-roam</a> based knowledge base. When I am learning
something new I create a new note, give it a tag and write down my
thoughts and useful references.
</p>

<p>
Lately I have had some time reviewing and experimenting with
interesting Clojure libraries. I enjoy to use <a href="https://github.com/clojure-emacs/cider">CIDER</a> for my Clojure
development, so to test libraries out I have to create a mini project
with a project.clj (for lein) or deps.edn (for clojure-cli) for CIDER
to open an useful REPL for me.
</p>

<p>
This approach has been unsatisfactory: even by having a template for
creating the project, I would find the whole setup being a
distraction.
</p>

<p>
Rather, I decided to enhance <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Org Babel</a> for my use case.
</p>

<p>
The way I test Clojure code is by creating a block looking like this
in an Org Mode file:
</p>

<div class="org-src-container">
<pre class="src src-org">#+begin_src clojure
(+ 1 1)
#+end_src
</pre>
</div>

<p>
Given you have set <code>(setq org-babel-clojure-backend 'cider)</code>, running
this block (<code>C-c C-c</code>) will start a CIDER session and eventually
produce a result.
</p>

<p>
To test libraries I aimed for this instead:
</p>

<div class="org-src-container">
<pre class="src src-org">#+begin_src clojure :deps '(("org.clojure/test.check" "1.1.1"))
(require '[clojure.test.check.generators :as tgen])
(tgen/sample (tgen/fmap #(apply str %) (tgen/vector tgen/char-alpha 10)))
#+end_src
</pre>
</div>

<p>
In the above block I want to try out <a href="https://github.com/clojure/test.check">test.check</a>, a library for
property testing. (In the block I am producing a sample of alphabetical
strings that are minimum 10 characters.)
</p>

<p>
The problem is: ob-clojure doesn't know about the <code>:deps</code> header!
Furthermore, CIDER doesn't know about the dependencies I want to add.
</p>

<p>
Luckily there is a hack to make this work.
</p>

<p>
First, let's redefine ob-clojure's runner function:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(defun ob-clojure-eval-with-cider (expanded params)
  "Evaluate EXPANDED code block with PARAMS using cider."
  (condition-case nil (require 'cider)
    (user-error "cider not available"))
  (let ((connection (cider-current-connection (cdr (assq :target params))))
        (result-params (cdr (assq :result-params params)))
        result0)
    ;; Andrea: below is where we add dependencies!
    (unless connection (let ((my/cider-extra-deps (alist-get :deps params))) (sesman-start-session 'CIDER))) 
    (if (not connection)
        ;; Display in the result instead of using `user-error'
        (setq result0 "Please reevaluate when nREPL is connected")
      (ob-clojure-with-temp-expanded expanded params
        (let ((response (nrepl-sync-request:eval exp connection)))
          (push (or (nrepl-dict-get response "root-ex")
                    (nrepl-dict-get response "ex")
                    (nrepl-dict-get
                     response (if (or (member "output" result-params)
                                      (member "pp" result-params))
                                  "out"
                                "value")))
                result0)))
      (ob-clojure-string-or-list
       ;; Filter out s-expressions that return nil (string "nil"
       ;; from nrepl eval) or comment forms (actual nil from nrepl)
       (reverse (delete "" (mapcar (lambda (r)
                                     (replace-regexp-in-string "nil" "" (or r "")))
                                   result0)))))))
</pre>
</div>

<p>
The line I commented extracts the list of dependencies and sets a
local binding <code>my/cider-extra-deps</code>.
</p>

<p>
All is left is to make CIDER use those:
</p>

<div class="org-src-container">
<pre class="src src-elisp">;; support a :deps header in ob-clojure blocks (can't work for bb and nbb, because they manage deps natively)
(defcustom my/cider-extra-deps nil "Extra deps to add to cider startup")

(defun my/cider-add-extra-deps (orig-fun &amp;rest args)
  (append (apply orig-fun args) my/cider-extra-deps))

(advice-add 'cider--jack-in-required-dependencies :around #'my/cider-add-extra-deps)
</pre>
</div>

<p>
Advicing <code>cider--jack-in-required-dependencies</code> is a bit fragile
because is a non-public function, still for a hack this is enough.
</p>

<p>
The idea is to inject the dependencies we need into the startup
dependencies that CIDER injects to work.
</p>

<p>
Loading these few lines makes the example above work nicely and is
making my explorations much simpler!
</p>

<p>
Hope this will help you as well.
</p>

<p>
Happy exploring!
</p>

</div>
</div>]]></description>
      <pubDate>2023-08-03</pubDate>
      <guid>http://ag91.github.io/blog/2023/08/03/an-easier-way-to-try-out-clojure-libraries-with-ob-clojure-and-cider</guid>
    </item>
    <item>
      <title>scala-cli-repl: a Scala REPL based on scala-cli</title>
      <link>http://ag91.github.io/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-07-22</pubDate>
      <guid>http://ag91.github.io/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli</guid>
    </item>
    <item>
      <title>A little exploration of Go from a Clojure perspective</title>
      <link>http://ag91.github.io/blog/2023/06/08/a-little-exploration-of-go-from-a-clojure-perspective</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-08</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/08/a-little-exploration-of-go-from-a-clojure-perspective</guid>
    </item>
    <item>
      <title>ob-gore: literate Go run via the Gore REPL</title>
      <link>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</guid>
    </item>
    <item>
      <title>FS2 vs ZIO streams with Ammonite: a syntax comparison</title>
      <link>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-03</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</guid>
    </item>
    <item>
      <title>org-blk-uri a little module to insert a file or url as an Org Mode src block</title>
      <link>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-05-25</pubDate>
      <guid>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</guid>
    </item>
    <item>
      <title>Moldable Emacs: what is the public API of this Elisp buffer?</title>
      <link>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-24</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</guid>
    </item>
    <item>
      <title>Doctest.el or testing your pure Elisp functions in your docstring</title>
      <link>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-20</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</guid>
    </item>
    <item>
      <title>Org Agenda and Your Future, or how to keep score of your long term goals with Org Mode</title>
      <link>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-12</pubDate>
      <guid>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</guid>
    </item>
    <item>
      <title>A little read-string utility using an Org Mode buffer</title>
      <link>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-09</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</guid>
    </item>
  </channel>
</rss>