<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Where parallels cross</title>
    <link>http://ag91.github.io</link>
    <description>Interesting bits of life</description>
    <pubDate>Tue, 06 Jun 2023 23:55:48 BST</pubDate>
    <lastBuildDate>Tue, 06 Jun 2023 23:55:48 BST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>ob-gore: literate Go run via the Gore REPL</title>
      <link>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</link>
      <description><![CDATA[<div>
<div class="post">
<h1>ob-gore: literate Go run via the Gore REPL</h1>
<p>
I wrote and published my first Org Babel extension yuhu! It is super basic
and just a hack really, but it works: <a href="https://github.com/ag91/ob-gore">https://github.com/ag91/ob-gore</a>.
</p>

<p>
This enables you to write Go snippets in an Emacs Org Mode buffer so
that you can evaluate them in a literate programming fashion through
the <a href="https://github.com/x-motemen/gore">Gore REPL</a>. I have been looking into Go recently and I am writing
down some notes on how things differ from Clojure. Firstly I tried out
<a href="https://github.com/pope/ob-go">ob-go</a>, but to get the output I needed to write the code like this:
</p>

<div class="org-src-container">
<pre class="src src-org">#+begin_src go :imports '("fmt")
list := []int{1,2,3}
for i, value := range list {
        list[i] = value + 1
}
fmt.Println(list)
#+end_src
</pre>
</div>

<p>
The <code>Println</code> bit is necessary in this snippet, because ob-go produces
a Go file that gets evaluated and has to pass linting rules before
execution: <code>list</code> must be used by the program.
</p>

<p>
I felt adding the <code>Println</code> is an extra step than the simpler version
my ob-gore supports:
</p>

<div class="org-src-container">
<pre class="src src-org">#+begin_src gore 
list := []int{1,2,3}
for i, value := range list {
        list[i] = value + 1
}
list
#+end_src
</pre>
</div>

<p>
Aside of the little time saved typing, the more interesting thing for
somebody using Lisp everyday is that having a Gore REPL at hand allows
me to test my ideas on the fly. I have even managed to show the output
of evaluating a Go expression inline in the buffer (writing about that
soon).
</p>

<p>
Anyway the little extension (which <del>hacks</del> builds over <a href="https://github.com/manute/gorepl-mode">gorepl-mode</a>) is
still a half-broken prototype, but I will improve it the more I
explore Go with a REPL (and at least is a starting point)!
</p>

<p>
Happy literate explorations!
</p>

</div>
</div>]]></description>
      <pubDate>2023-06-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</guid>
    </item>
    <item>
      <title>FS2 vs ZIO streams with Ammonite: a syntax comparison</title>
      <link>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-03</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</guid>
    </item>
    <item>
      <title>org-blk-uri a little module to insert a file or url as an Org Mode src block</title>
      <link>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-05-25</pubDate>
      <guid>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</guid>
    </item>
    <item>
      <title>Moldable Emacs: what is the public API of this Elisp buffer?</title>
      <link>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-24</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</guid>
    </item>
    <item>
      <title>Doctest.el or testing your pure Elisp functions in your docstring</title>
      <link>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-20</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</guid>
    </item>
    <item>
      <title>Org Agenda and Your Future, or how to keep score of your long term goals with Org Mode</title>
      <link>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-12</pubDate>
      <guid>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</guid>
    </item>
    <item>
      <title>A little read-string utility using an Org Mode buffer</title>
      <link>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-09</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</guid>
    </item>
    <item>
      <title>Emacs as your code-compass: what code is this contributor familiar with?</title>
      <link>http://ag91.github.io/blog/2023/02/06/emacs-as-your-code-compass-what-code-is-this-contributor-familiar-with</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/06/emacs-as-your-code-compass-what-code-is-this-contributor-familiar-with</guid>
    </item>
    <item>
      <title>Moldable Emacs: remove unused React Native styles for a component with tree-sitter</title>
      <link>http://ag91.github.io/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-12-13</pubDate>
      <guid>http://ag91.github.io/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter</guid>
    </item>
    <item>
      <title>A tiny Elisp library to gather synonyms with Wordnet (and how to use it so Emacs can help searching my notes)</title>
      <link>http://ag91.github.io/blog/2022/11/29/a-tiny-elisp-library-to-gather-synonyms-with-wordnet</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-11-29</pubDate>
      <guid>http://ag91.github.io/blog/2022/11/29/a-tiny-elisp-library-to-gather-synonyms-with-wordnet</guid>
    </item>
  </channel>
</rss>