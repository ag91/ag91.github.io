<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Where parallels cross</title>
    <link>http://ag91.github.io</link>
    <description>Interesting bits of life</description>
    <pubDate>Sun, 03 Mar 2024 00:01:12 GMT</pubDate>
    <lastBuildDate>Sun, 03 Mar 2024 00:01:12 GMT</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Improve EMMS randomness</title>
      <link>http://ag91.github.io/blog/2024/03/02/improve-emms-randomness</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Improve EMMS randomness</h1>
<p>
I sometimes make Emacs play music for me (using <a href="https://ag91.github.io/blog/2022/05/02/emms-+-org-roam-youtube-playlists-with-titles/">emms, org-roam, mpv and
YouTube</a>).
</p>

<p>
When I need a bit of spice, I tell EMMS to play tracks at random. And
know what? Sometimes tracks repeat!
</p>

<p>
I don't like that and since Emacs can change super easily, I opened a
scratch buffer and modified EMMS like this:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(defvar emms-random-playlist-seen-indeces nil)

(defun emms-playlist-select-random ()
  "Select a random track in the current buffer."
  (emms-playlist-ensure-playlist-buffer)
  ;; FIXME: This is rather inefficient.
  (save-excursion
    (let ((track-indices nil) next)
      (goto-char (point-min))
      (emms-walk-tracks
        (setq track-indices (cons (point)
                                  track-indices)))
      (setq track-indices (vconcat
                           (seq-difference
                            track-indices
                            emms-random-playlist-seen-indeces)))
      (if (equal track-indices [])
          (progn
            (emms-stop)
            (setq emms-random-playlist-seen-indeces nil)
            (message "Emms; Playlist finished"))
        (setq next (aref track-indices
                         (random (length track-indices))))
        (add-to-list 'emms-random-playlist-seen-indeces next)
        (emms-playlist-select next)))))
</pre>
</div>


<p>
Essentially this just makes EMMS record tracks you have already heard
on random selection (see <code>seq-difference</code> bit). This is good enough
for me and hopefully the EMMS developers will improve the original
function over time.
</p>

<p>
Happy listening!
</p>

<p>
P.S.: The diff from the original is:
</p>

<div class="org-src-container">
<pre class="src src-diff">*** /tmp/ediffN6IKmX	Sat Mar  2 23:56:04 2024
--- /tmp/ediffnO7kjS	Sat Mar  2 23:56:04 2024
***************
*** 1,13 ****
  (defun emms-playlist-select-random ()
    "Select a random track in the current buffer."
    (emms-playlist-ensure-playlist-buffer)
    ;; FIXME: This is rather inefficient.
    (save-excursion
!     (let ((track-indices nil))
        (goto-char (point-min))
        (emms-walk-tracks
       (setq track-indices (cons (point)
                                 track-indices)))
!       (setq track-indices (vconcat track-indices))
!       (emms-playlist-select (aref track-indices
! 				  (random (length track-indices)))))))
--- 1,25 ----
+ (defvar emms-random-playlist-seen-indeces nil)
+ 
  (defun emms-playlist-select-random ()
    "Select a random track in the current buffer."
    (emms-playlist-ensure-playlist-buffer)
    ;; FIXME: This is rather inefficient.
    (save-excursion
!     (let ((track-indices nil) next)
        (goto-char (point-min))
        (emms-walk-tracks
       (setq track-indices (cons (point)
                                 track-indices)))
!       (setq track-indices (vconcat
!                            (seq-difference
!                             track-indices
!                             emms-random-playlist-seen-indeces)))
!       (if (equal track-indices [])
!           (progn
!             (emms-stop)
!             (setq emms-random-playlist-seen-indeces nil)
!             (message "Emms; Playlist finished"))
!         (setq next (aref track-indices
! 		         (random (length track-indices))))
!         (add-to-list 'emms-random-playlist-seen-indeces next)
!         (emms-playlist-select next)))))
\ No newline at end of file
</pre>
</div>

</div>
</div>]]></description>
      <pubDate>2024-03-03</pubDate>
      <guid>http://ag91.github.io/blog/2024/03/02/improve-emms-randomness</guid>
    </item>
    <item>
      <title>A quick-fix for golden-ratio and lsp-mode</title>
      <link>http://ag91.github.io/blog/2024/02/19/a-quick-fix-for-golden-ratio-and-lsp-mode</link>
      <description><![CDATA[]]></description>
      <pubDate>2024-02-19</pubDate>
      <guid>http://ag91.github.io/blog/2024/02/19/a-quick-fix-for-golden-ratio-and-lsp-mode</guid>
    </item>
    <item>
      <title>Make Emacs help in creating an example of Scala classes</title>
      <link>http://ag91.github.io/blog/2023/12/11/make-emacs-help-in-creating-an-example-of-scala-classes</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-12-11</pubDate>
      <guid>http://ag91.github.io/blog/2023/12/11/make-emacs-help-in-creating-an-example-of-scala-classes</guid>
    </item>
    <item>
      <title>An easier way to try Cljs libraries with shadow-cljs ob-clojure and cider</title>
      <link>http://ag91.github.io/blog/2023/08/28/an-easier-way-to-try-cljs-libraries-with-shadow-cljs-ob-clojure-and-cider</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-08-29</pubDate>
      <guid>http://ag91.github.io/blog/2023/08/28/an-easier-way-to-try-cljs-libraries-with-shadow-cljs-ob-clojure-and-cider</guid>
    </item>
    <item>
      <title>An easier way to try out Clojure libraries with ob-clojure and cider</title>
      <link>http://ag91.github.io/blog/2023/08/03/an-easier-way-to-try-out-clojure-libraries-with-ob-clojure-and-cider</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-08-03</pubDate>
      <guid>http://ag91.github.io/blog/2023/08/03/an-easier-way-to-try-out-clojure-libraries-with-ob-clojure-and-cider</guid>
    </item>
    <item>
      <title>scala-cli-repl: a Scala REPL based on scala-cli</title>
      <link>http://ag91.github.io/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-07-22</pubDate>
      <guid>http://ag91.github.io/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli</guid>
    </item>
    <item>
      <title>A little exploration of Go from a Clojure perspective</title>
      <link>http://ag91.github.io/blog/2023/06/08/a-little-exploration-of-go-from-a-clojure-perspective</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-08</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/08/a-little-exploration-of-go-from-a-clojure-perspective</guid>
    </item>
    <item>
      <title>ob-gore: literate Go run via the Gore REPL</title>
      <link>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</guid>
    </item>
    <item>
      <title>FS2 vs ZIO streams with Ammonite: a syntax comparison</title>
      <link>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-03</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</guid>
    </item>
    <item>
      <title>org-blk-uri a little module to insert a file or url as an Org Mode src block</title>
      <link>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-05-25</pubDate>
      <guid>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</guid>
    </item>
  </channel>
</rss>