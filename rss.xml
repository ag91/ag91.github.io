<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Where parallels cross</title>
    <link>http://ag91.github.io</link>
    <description>Interesting bits of life</description>
    <pubDate>Fri, 24 Mar 2023 00:43:01 GMT</pubDate>
    <lastBuildDate>Fri, 24 Mar 2023 00:43:01 GMT</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Moldable Emacs: what is the public API of this Elisp buffer?</title>
      <link>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Moldable Emacs: what is the public API of this Elisp buffer?</h1>
<p>
Lately I have been reading the Elisp source code that ships with
Emacs 29. The addition (and the general excitement) of <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/treesit.el">treesit.el</a>
made me willing to come up with a plan to support that in my
<a href="https://github.com/ag91/moldable-emacs">moldable-emacs</a>.
</p>

<p>
I like that Emacs contributors keep a stoic discipline in distinguish
public and private functions in a library. The convention is that
<code>my-function</code> belongs to the public API while <code>my--function</code> is not.
</p>

<p>
As a user often I care only about the public interface. So I thought:
wouldn't be nice to have a view/mold that shows me only what I need?
</p>

<p>
You can see in the below video how the <a href="https://github.com/ag91/moldable-emacs/blob/2268cbe/molds/core.el#L1092">resulting mold</a> helped me
exploring <code>cl-lib</code>.
</p>

<p>
<a href="/assets/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer/showApiMold.mp4">/assets/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer/showApiMold.mp4</a>
</p>

<p>
The code was just some filtering of the tree-sitter concrete tree
really.
</p>

<p>
For instance, this is how I filer defcustoms:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(defun me-elisp-defcustoms (tree)
  "Extract defcustoms from TREE.

&gt;&gt; (me-elisp-defcustoms
  '((:type something-else)
    (:type list
     :text \"(defcustom test 1 \\\"HI\\\")\"
     :begin 321 :end 354
     :buffer \"test.el\"
     :buffer-file \"/tmp/test.el\"
     :mode emacs-lisp-mode
     :level 0)))
=&gt; ((:type list
     :text \"(defcustom test 1 \\\"HI\\\")\"
     :begin 321 :end 354
     :buffer \"test.el\"
     :buffer-file \"/tmp/test.el\"
     :mode emacs-lisp-mode
     :level 0))"
  (--filter
   (and (equal 'list (plist-get it :type))
        (s-starts-with-p "(defcustom " (plist-get it :text)))
   tree))
</pre>
</div>

<p>
It feels a hack but it is working fine :) Note the <a href="https://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring/">doctest in the
documentation</a>!
</p>

<p>
This filters out some of the complexity of Elisp libraries I don't
know.
</p>

<p>
I hope to generalize this little by little for other languages so I
can get the essence of the files I need to read.
</p>

<p>
And I wonder if this could help me evaluate the quality of an API as
well. It may be of help if Emacs warns me while I write my library and
tells me that the API is getting bloated, no?
</p>

<p>
Anyway, this has been good for my Elisp exploration.
</p>

<p>
Happy exploring!
</p>

</div>
</div>]]></description>
      <pubDate>2023-03-24</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</guid>
    </item>
    <item>
      <title>Doctest.el or testing your pure Elisp functions in your docstring</title>
      <link>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-20</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</guid>
    </item>
    <item>
      <title>Org Agenda and Your Future, or how to keep score of your long term goals with Org Mode</title>
      <link>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-12</pubDate>
      <guid>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</guid>
    </item>
    <item>
      <title>A little read-string utility using an Org Mode buffer</title>
      <link>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-09</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</guid>
    </item>
    <item>
      <title>Emacs as your code-compass: what code is this contributor familiar with?</title>
      <link>http://ag91.github.io/blog/2023/02/06/emacs-as-your-code-compass-what-code-is-this-contributor-familiar-with</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/06/emacs-as-your-code-compass-what-code-is-this-contributor-familiar-with</guid>
    </item>
    <item>
      <title>Moldable Emacs: remove unused React Native styles for a component with tree-sitter</title>
      <link>http://ag91.github.io/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-12-13</pubDate>
      <guid>http://ag91.github.io/blog/2022/12/13/moldable-emacs-remove-unused-react-native-styles-for-a-component-with-tree-sitter</guid>
    </item>
    <item>
      <title>A tiny Elisp library to gather synonyms with Wordnet (and how to use it so Emacs can help searching my notes)</title>
      <link>http://ag91.github.io/blog/2022/11/29/a-tiny-elisp-library-to-gather-synonyms-with-wordnet</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-11-29</pubDate>
      <guid>http://ag91.github.io/blog/2022/11/29/a-tiny-elisp-library-to-gather-synonyms-with-wordnet</guid>
    </item>
    <item>
      <title>Emacs as your code-compass: who is the person who refactored most in this project?</title>
      <link>http://ag91.github.io/blog/2022/11/23/emacs-as-your-code-compass-who-is-the-person-who-refactored-most-in-this-project</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-11-23</pubDate>
      <guid>http://ag91.github.io/blog/2022/11/23/emacs-as-your-code-compass-who-is-the-person-who-refactored-most-in-this-project</guid>
    </item>
    <item>
      <title>Catch you JS console.log you forgot to remove with Emacs and Magit</title>
      <link>http://ag91.github.io/blog/2022/11/15/catch-you-js-consolelog-you-forgot-to-remove-with-emacs-and-magit</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-11-15</pubDate>
      <guid>http://ag91.github.io/blog/2022/11/15/catch-you-js-consolelog-you-forgot-to-remove-with-emacs-and-magit</guid>
    </item>
    <item>
      <title>Merge plists in Elisp</title>
      <link>http://ag91.github.io/blog/2022/10/30/merge-plists-in-elisp</link>
      <description><![CDATA[]]></description>
      <pubDate>2022-10-30</pubDate>
      <guid>http://ag91.github.io/blog/2022/10/30/merge-plists-in-elisp</guid>
    </item>
  </channel>
</rss>