<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Where parallels cross</title>
    <link>http://ag91.github.io</link>
    <description>Interesting bits of life</description>
    <pubDate>Sat, 22 Jul 2023 00:33:54 BST</pubDate>
    <lastBuildDate>Sat, 22 Jul 2023 00:33:54 BST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>scala-cli-repl: a Scala REPL based on scala-cli</title>
      <link>http://ag91.github.io/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli</link>
      <description><![CDATA[<div>
<div class="post">
<h1>scala-cli-repl: a Scala REPL based on scala-cli</h1>

<div id="outline-container-org39a46b0" class="outline-2">
<h2 id="org39a46b0">Too long; didn't read</h2>
<div class="outline-text-2" id="text-org39a46b0">
<p>
I published <a href="https://github.com/ag91/scala-cli-repl">scala-cli-repl</a> a mode to interact with <a href="https://github.com/VirtusLab/scala-cli">scala-cli</a>, <a href="https://github.com/scala/improvement-proposals/pull/46">the
future scala command</a> from within Emacs. It comes with an org-babel
extension that makes it easy to try libraries and scala versions in
Org Mode src blocks. And it also supports lsp-org goodies!
</p>
</div>
</div>

<div id="outline-container-org215fba4" class="outline-2">
<h2 id="org215fba4">The problem</h2>
<div class="outline-text-2" id="text-org215fba4">
<p>
I have been reading books about Scala libraries lately and it was fun
to see how the transition to Scala 3 is in progress. Since code
examples use both Scala 2 and 3, I have struggled testing things out
in an easy way. I was following along with <a href="https://ammonite.io/">Ammonite</a>, which allowed me
to try libraries easily in scripts, and then I discovered scala-cli
which also allowed me to switch between Scala versions easily.
</p>

<p>
Since I like to take notes in Org Mode, I thought it would be cool to
have a REPL and org babel extension for Emacs running on scala-cli.
Apparently nobody felt the need to make a mode yet, so how could I not
be the first?
</p>
</div>
</div>

<div id="outline-container-org6d3c8fd" class="outline-2">
<h2 id="org6d3c8fd">And there is a solution</h2>
<div class="outline-text-2" id="text-org6d3c8fd">
<p>
So far I had been using <a href="https://github.com/zwild/ammonite-term-repl">ammonite-term-repl</a>, a mode for Ammonite and
that has been archived recently. After a bit of tweaking I found out
that by changing some variables the mode worked fine also for
scala-cli. Since it was archived, I cleaned it up a little bit and
made a new repository that focuses on scala-cli: <a href="https://github.com/ag91/scala-cli-repl">scala-cli-repl</a>.
</p>

<p>
This is how the REPL look:
</p>


<div id="orgf30725e" class="figure">
<p><img src="/assets/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli/scala-cli.gif" alt="/assets/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli/scala-cli.gif" />
</p>
</div>

<p>
I added also a function to convert SBT dependencies into the Mill
format that scala-cli accepts (<code>scala-cli-conver-and-kill-deps</code>). That
should make it easier to try things out.
</p>

<p>
The interesting bit has been to support org babel for Scala. This
relies on the REPL. For my needs I wanted to support setting a Scala
version and dependencies as header arguments of a source block.
</p>

<p>
The extension supports blocks like these:
</p>

<div class="org-src-container">
<pre class="src src-org">#+begin_src scala :dep '("com.lihaoyi::os-lib:0.9.0" "com.lihaoyi::utest:0.7.10")
println("This is:" + os.pwd)
#+end_src
</pre>
</div>

<p>
Given I like to try things in Org Mode source blocks, I thought that
would have been cool to get some code completions that <a href="https://scalameta.org/metals/">scala-metals</a>
usually provide me.
</p>

<p>
This is how it looks to setup a scala block with my <code>ob-scala-cli-lsp-org</code>:
</p>


<div id="org1ccb87c" class="figure">
<p><img src="ob-/assets/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli/scala-cli.gif" alt="ob-/assets/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli/scala-cli.gif" />
</p>
</div>

<p>
You can see that I was able to complete <code>os.pwd</code> using scala-metals
from an Org Mode block!
</p>

<p>
The implementation uses lsp-org (which is part of <a href="https://github.com/emacs-lsp/lsp-mode">lsp-mode</a>) and scala
scripts (file ending with .sc). All in all, is pretty cool to work on Scala
examples with full IDE support in your literate programming!
And now I can more easily follow my books along :)
</p>

<p>
Happy hacking!
</p>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2023-07-22</pubDate>
      <guid>http://ag91.github.io/blog/2023/07/22/scala-cli-repl-a-scala-repl-based-on-scala-cli</guid>
    </item>
    <item>
      <title>A little exploration of Go from a Clojure perspective</title>
      <link>http://ag91.github.io/blog/2023/06/08/a-little-exploration-of-go-from-a-clojure-perspective</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-08</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/08/a-little-exploration-of-go-from-a-clojure-perspective</guid>
    </item>
    <item>
      <title>ob-gore: literate Go run via the Gore REPL</title>
      <link>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/06/ob-gore-literate-go-run-via-the-gore-repl</guid>
    </item>
    <item>
      <title>FS2 vs ZIO streams with Ammonite: a syntax comparison</title>
      <link>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-06-03</pubDate>
      <guid>http://ag91.github.io/blog/2023/06/02/fs2-vs-zio-streams-with-ammonite-a-syntax-comparison</guid>
    </item>
    <item>
      <title>org-blk-uri a little module to insert a file or url as an Org Mode src block</title>
      <link>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-05-25</pubDate>
      <guid>http://ag91.github.io/blog/2023/05/25/org-blk-uri-a-little-module-to-insert-a-file-or-url-as-an-org-mode-src-block</guid>
    </item>
    <item>
      <title>Moldable Emacs: what is the public API of this Elisp buffer?</title>
      <link>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-24</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/24/moldable-emacs-what-is-the-public-api-of-this-elisp-buffer</guid>
    </item>
    <item>
      <title>Doctest.el or testing your pure Elisp functions in your docstring</title>
      <link>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-03-20</pubDate>
      <guid>http://ag91.github.io/blog/2023/03/20/doctestel-or-testing-your-pure-elisp-functions-in-your-docstring</guid>
    </item>
    <item>
      <title>Org Agenda and Your Future, or how to keep score of your long term goals with Org Mode</title>
      <link>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-12</pubDate>
      <guid>http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode</guid>
    </item>
    <item>
      <title>A little read-string utility using an Org Mode buffer</title>
      <link>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-09</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/09/a-little-read-string-utility-using-an-org-mode-buffer</guid>
    </item>
    <item>
      <title>Emacs as your code-compass: what code is this contributor familiar with?</title>
      <link>http://ag91.github.io/blog/2023/02/06/emacs-as-your-code-compass-what-code-is-this-contributor-familiar-with</link>
      <description><![CDATA[]]></description>
      <pubDate>2023-02-06</pubDate>
      <guid>http://ag91.github.io/blog/2023/02/06/emacs-as-your-code-compass-what-code-is-this-contributor-familiar-with</guid>
    </item>
  </channel>
</rss>